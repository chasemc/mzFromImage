1+1
install.packages("BiocManager")
insta
install.packages("EBImage")
BiocManager::install("EBImage")
usethis::use_package("EBImage")
BiocManager::install("EBImage", type = "depends")
?BiocManager::install("EBImage", type = "depends")
?usethis::use_package("EBImage")
usethis::use_package("EBImage",type ="Depends")
usethis::use_package("shiny",type ="Depends")
usethis::use_package("MALDIquant",type ="Depends")
usethis::use_mit_license("Chase Clark")
usethis::git_vaccinate()
devtools::build()
devtools::document()
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
library(mzFromImage)
library(mzFromImage)
system.file("capture.png", package = "mzImager")
system.file("www/capture.png", package = "mzImager")
system.file("www/capture.png", package = "mzImager")
library(mzFromImage)
system.file("www/capture.png", package = "mzFromImage")
devtools::load_all(".")
mzFromImage::run_app()
fluidPage(
titlePanel("MS from Image"),
sidebarLayout(
sidebarPanel(
sliderInput("hvc",
"Horizontal cut",
min = 1,
max = 5000,
value = 783),
sliderInput("lvc",
"Left vertical cut",
min = 1,
max = 5000,
value = 91),
sliderInput("rvc",
"Right vertical cut",
min = 1,
max = 5000,
value = 1185),
numericInput("lowMass",
"Enter lowest mass peak found",
value = 153.89,
min = NA,
max = NA,
step = NA,
width = NULL),
numericInput("highMass",
"Enter highest mass peak found",
value = 514.11,
min = NA,
max = NA,
step = NA,
width = NULL),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot"),
plotOutput("distPlot2")
)
)
)
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
EBImage::channel(yourimage,"gray")
EBImage::channel("yourimage","gray")
EBImage::readImage("yourimage")
tryCatch(EBImage::readImage("yourimage"),
error = function(x) validate(need(F, "unable to read image")),
finally = function(x) warning("unable to read image"))
validate(need(EBImage::readImage("yourimage"), "unable to read image")
validate(need(EBImage::readImage("yourimage"), "unable to read image"))
try(EBImage::readImage("yourimage"))
tryCatch(EBImage::readImage("yourimage"),
error = function(x) "unable to read image"),
finally = function(x) warning("unable to read image"))
tryCatch(EBImage::readImage("yourimage"),
error = function(x) "unable to read image",
finally = function(x) warning("unable to read image"))
tryCatch(EBImage::readImage("yourimage"),
error = function(x) (need(F, "unable to read image")),
finally = function(x) warning("unable to read image"))
tryCatch(EBImage::readImage("yourimage"),
error = function(x) validate(need(F, "unable to read image")),
finally = function(x) warning("unable to read image"))
validate(need(F,"sadf"))
tryCatch(EBImage::readImage("C:/Users/chase/Downloads/mzImager/inst/www/capture.png"),
error = function(x) validate(need(F, "unable to read image")),
finally = function(x) warning("unable to read image"))
imageFile <- tryCatch(EBImage::readImage("C:/Users/chase/Downloads/mzImager/inst/www/capture.png"),
error = function(x) validate(need(F, "unable to read image")),
finally = function(x) warning("unable to read image"))
imageFile
imageFile <- tryCatch(EBImage::readImage("C:/User/chase/Downloads/mzImager/inst/www/capture.png"),
error = function(x) validate(need(F, "unable to read image")),
finally = function(x) warning("unable to read image"))
imageFile
imageFile <- tryCatch(EBImage::readImage("sdsd"),
error = function(x) validate(need(F, "unable to read image")),
finally = function(x) warning("unable to read image"))
imageFile
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
aws
aws$datapath
devtools::load_all(".")
aws$datapath
mzFromImage::run_app()
imageFile
class(imageFile)
class(imageFile) == "Image"
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
mzFromImage::run_app()
AWS
devtools::load_all(".")
mzFromImage::run_app()
aws
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
awsq
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
awsq
validate(need(class(awsq) == "Image"))
awsq
class(awsq)
need <- function(expr, message = paste(label, "must be provided"), label) {
force(message) # Fail fast on message/label both being missing
if (!isTruthy(expr))
return(message)
else
return(invisible(NULL))
}
need(class(imageData$data) == "Image")
?force
message = paste(label, "must be provided"), label)
force(message)
message = paste(label, "must be provided"), label)
message = paste(label, "must be provided")
remove(need)
need(1+1)
devtools::load_all(".")
need(1+1)
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
awsq
a <- MALDIquant::createMassSpectrum(mass = 1L:length(awsq),
intensity = 1L/awsq)
a <- MALDIquant::detectPeaks(a, halfWindowSize = 1L)
awsq
EBImage::imageData(awsq)[1:10,2]
awsq
EBImage::imageData(awsq)[1:10,1]
EBImage::imageData(awsq)[1:10,2]
EBImage::imageData(awsq)[1:10,200]
EBImage::imageData(awsq)
z<-EBImage::imageData(awsq)
devtools::load_all(".")
mzFromImage::run_app()
awsq
devtools::load_all(".")
awsq
devtools::load_all(".")
devtools::load_all(".")
mzFromImage::run_app()
aww
class(aww)
class(aww) == "Image")
class(aww) == "Image"
validate(need(class(aww) == "Image", "Not an image"))
devtools::load_all(".")
mzFromImage::run_app()
a2q
a <- MALDIquant::createMassSpectrum(mass = 1L:length(imageSlice()),
intensity = 1L/imageSlice())
a <- MALDIquant::detectPeaks(a, halfWindowSize = 1L)
pred <- data.frame(b = a@mass)
train <- cbind.data.frame(g = c(input$lowMass,
input$highMass),
b = c(head(a@mass, n = 1),
tail(a@mass, n = 1)))
modelOut <- lm(g~b, data = train)
predict(modelOut, pred)
a <- MALDIquant::createMassSpectrum(mass = 1L:length(a2q),
intensity = 1L/a2q)
a <- MALDIquant::detectPeaks(a, halfWindowSize = 1L)
pred <- data.frame(b = a@mass)
train <- cbind.data.frame(g = c(input$lowMass,
input$highMass),
b = c(head(a@mass, n = 1),
tail(a@mass, n = 1)))
modelOut <- lm(g~b, data = train)
predict(modelOut, pred)
a
pred
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
hil
plot(imageData$data)
plot(hil)
devtools::load_all(".")
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
?observe
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
aa
bb
plot(aa)
plot(aa, type="l")
bb
points(bb)
points(bb, col="red")
bb@mass
points(bb@mass, bb@intensity, col="red")
lines(bb@mass, bb@intensity, col="red")
bb@intensity
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
bb
bb@mass
devtools::load_all(".")
bb@mass
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
mm
mm@mass
devtools::load_all(".")
mm@mass
mzFromImage::run_app()
is
devtools::load_all(".")
mzFromImage::run_app()
iqs
plot(iqs)
plot(iqs, type="l")
a <- MALDIquant::createMassSpectrum(mass = 1L:length(iqs),
intensity = 1L/iqs)
a
plot(a)
b<- MALDIquant::detectPeaks(a, halfWindowSize = 1L)
plot(points(b))
plot(a)
points(b)
a
b
b<- MALDIquant::detectPeaks(a, halfWindowSize = 2L)
b
a
mm
iqs
a <- MALDIquant::createMassSpectrum(mass = c(1:100, 1L:length(iqs)),
intensity = c(1:100, 1L/iqs))
a <- MALDIquant::createMassSpectrum(mass = 1L:length(iqs) +100),
intensity = c(1:100, 1L/iqs))
a <- MALDIquant::createMassSpectrum(mass = 1L:length(iqs) +100,
intensity = c(1:100, 1L/iqs))
a <- MALDIquant::createMassSpectrum(mass = 1L:length(iqs) +100,
intensity = c(1:99, 1L/iqs))
1L:length(iqs) +100
length(1L:length(iqs) +100)
length(1L:length(iqs) )
length(1L:(length(iqs)+100)
length(1L:(length(iqs)+100)
)
a <- MALDIquant::createMassSpectrum(mass = 1L:(length(iqs) + 100),
intensity = c(1:99, 1L/iqs))
a <- MALDIquant::createMassSpectrum(mass = 1L:(length(iqs) + 100),
intensity = c(1:100, 1L/iqs))
a <- MALDIquant::createMassSpectrum(mass = 1L:(length(iqs) + 100),
intensity = c(rep(1,100), 1L/iqs))
a
b<- MALDIquant::detectPeaks(a, halfWindowSize = 1L)
b
plot(a)
points(b)
b
a<-b
a@mass <- a@mass[-1]
a@intensity <- a@intensity[-1]
a
a
massPeaks<-a
massPeaks <- a
lowMass <- 153.89
highMass <- 514.11
pred <- data.frame(b = massPeaks@mass)
train <- cbind.data.frame(g = c(input$lowMass,
input$highMass),
b = c(head(a@mass, n = 1),
tail(a@mass, n = 1)))
train <- cbind.data.frame(g = c(lowMass,
highMass),
b = c(head(a@mass, n = 1),
tail(a@mass, n = 1)))
train
ms <- c(153.89,
181.80,
197.78,
316.88,
334.88,
360.77,
514.11)
plot(massPeaks@mass, ms)
modelOut <- lm(g~b, data = train)
abline(modelOut)
predict(modelOut, pred)
points(predict(modelOut, pred), col="red")
predict(modelOut, pred)
zz<-predict(modelOut, pred)
lines(predict(modelOut, pred),predict(modelOut, pred), col="red")
lines(predict(modelOut, pred),ms, col="red")
plot(predict(modelOut, pred),ms, col="red")
predict(modelOut, pred)
ms
devtools::load_all(".")
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
a
predict(modelOut, pred)
devtools::load_all(".")
predict(modelOut, pred)
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
aqwa
aqwa@mass
a
aqwa
massPeaks<-aqwa
lowMass <- 153.89
highMass <- 514.11
pred <- data.frame(b = massPeaks@mass)
train <- cbind.data.frame(g = c(lowMass,
highMass),
b = c(head(a@mass, n = 1),
tail(a@mass, n = 1)))
modelOut <- lm(g~b, data = train)
predict(modelOut, pred)
pred
train
train <- cbind.data.frame(g = c(lowMass,
highMass),
b = c(head(aqwa@mass, n = 1),
tail(aqwa@mass, n = 1)))
train
modelOut <- lm(g~b, data = train)
predict(modelOut, pred)
devtools::load_all(".")
mzFromImage::run_app()
hil
dim(hil)
dim(hil)
plot(hil)
devtools::load_all(".")
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
appl
devtools::load_all(".")
devtools::load_all(".")
mzFromImage::run_app()
appl
devtools::load_all(".")
mzFromImage::run_app()
appl
devtools::load_all(".")
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
mzFromImage::run_app()
?usethis::use_description()
options(
usethis.description = list(
`Authors@R` = 'person("Chase", "Clark", email = "chasec288@gmail.com", role = c("aut", "cre"),
comment = c(ORCID = "0000-0001-6439-9397"))',
License = "MIT + file LICENSE",
Language =  "en"
)
)
usethis::use_description()
devtools::load_all(".")
library(mzFromImage)
mzFromImage::run_app()
mzFromImage::run_app()
library(mzFromImage)
library(mzFromImage)
devtools::document()
library(mzFromImage)
devtools::document()
mzFromImage::run_app()
library(mzFromImage)
devtools::load_all(".")
mzFromImage::run_app()
devtools::load_all(".")
usethis::git_vaccinate()
?usethis::git_vaccinate()
usethis::git_vaccinate()
